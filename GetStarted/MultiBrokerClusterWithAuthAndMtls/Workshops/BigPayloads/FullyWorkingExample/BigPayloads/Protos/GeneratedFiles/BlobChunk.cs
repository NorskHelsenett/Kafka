// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BlobChunk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KafkaBlobChunking {

  /// <summary>Holder for reflection information generated from BlobChunk.proto</summary>
  public static partial class BlobChunkReflection {

    #region Descriptor
    /// <summary>File descriptor for BlobChunk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlobChunkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9CbG9iQ2h1bmsucHJvdG8iugIKCUJsb2JDaHVuaxIPCgdDaHVua0lkGAEg",
            "ASgJEhYKDkNvbXBsZXRlQmxvYklkGAIgASgJEhwKFENvbXBsZXRlQmxvYkNo",
            "ZWNrc3VtGAMgASgJEhMKC0NodW5rTnVtYmVyGAQgASgEEhUKDUNodW5rQ2hl",
            "Y2tzdW0YBSABKAkSGQoRQ2h1bmtOdW1iZXJPZkJ5ZXMYBiABKAQSFAoMQ2h1",
            "bmtQYXlsb2FkGAcgASgMEhsKE1RvdGFsTnVtYmVyT2ZDaHVua3MYCCABKAQS",
            "JgoeQ29tcGxldGVCbG9iVG90YWxOdW1iZXJPZkJ5dGVzGAkgASgEEiEKGUNv",
            "bXBsZXRlQmxvYlNjaGVtYVN1YmplY3QYCiABKAkSIQoZQ29tcGxldGVCbG9i",
            "U2NoZW1hVmVyc2lvbhgLIAEoCUIUqgIRS2Fma2FCbG9iQ2h1bmtpbmdiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KafkaBlobChunking.BlobChunk), global::KafkaBlobChunking.BlobChunk.Parser, new[]{ "ChunkId", "CompleteBlobId", "CompleteBlobChecksum", "ChunkNumber", "ChunkChecksum", "ChunkNumberOfByes", "ChunkPayload", "TotalNumberOfChunks", "CompleteBlobTotalNumberOfBytes", "CompleteBlobSchemaSubject", "CompleteBlobSchemaVersion" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BlobChunk : pb::IMessage<BlobChunk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BlobChunk> _parser = new pb::MessageParser<BlobChunk>(() => new BlobChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BlobChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KafkaBlobChunking.BlobChunkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BlobChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BlobChunk(BlobChunk other) : this() {
      chunkId_ = other.chunkId_;
      completeBlobId_ = other.completeBlobId_;
      completeBlobChecksum_ = other.completeBlobChecksum_;
      chunkNumber_ = other.chunkNumber_;
      chunkChecksum_ = other.chunkChecksum_;
      chunkNumberOfByes_ = other.chunkNumberOfByes_;
      chunkPayload_ = other.chunkPayload_;
      totalNumberOfChunks_ = other.totalNumberOfChunks_;
      completeBlobTotalNumberOfBytes_ = other.completeBlobTotalNumberOfBytes_;
      completeBlobSchemaSubject_ = other.completeBlobSchemaSubject_;
      completeBlobSchemaVersion_ = other.completeBlobSchemaVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BlobChunk Clone() {
      return new BlobChunk(this);
    }

    /// <summary>Field number for the "ChunkId" field.</summary>
    public const int ChunkIdFieldNumber = 1;
    private string chunkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChunkId {
      get { return chunkId_; }
      set {
        chunkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CompleteBlobId" field.</summary>
    public const int CompleteBlobIdFieldNumber = 2;
    private string completeBlobId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompleteBlobId {
      get { return completeBlobId_; }
      set {
        completeBlobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CompleteBlobChecksum" field.</summary>
    public const int CompleteBlobChecksumFieldNumber = 3;
    private string completeBlobChecksum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompleteBlobChecksum {
      get { return completeBlobChecksum_; }
      set {
        completeBlobChecksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChunkNumber" field.</summary>
    public const int ChunkNumberFieldNumber = 4;
    private ulong chunkNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ChunkNumber {
      get { return chunkNumber_; }
      set {
        chunkNumber_ = value;
      }
    }

    /// <summary>Field number for the "ChunkChecksum" field.</summary>
    public const int ChunkChecksumFieldNumber = 5;
    private string chunkChecksum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChunkChecksum {
      get { return chunkChecksum_; }
      set {
        chunkChecksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChunkNumberOfByes" field.</summary>
    public const int ChunkNumberOfByesFieldNumber = 6;
    private ulong chunkNumberOfByes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ChunkNumberOfByes {
      get { return chunkNumberOfByes_; }
      set {
        chunkNumberOfByes_ = value;
      }
    }

    /// <summary>Field number for the "ChunkPayload" field.</summary>
    public const int ChunkPayloadFieldNumber = 7;
    private pb::ByteString chunkPayload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString ChunkPayload {
      get { return chunkPayload_; }
      set {
        chunkPayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TotalNumberOfChunks" field.</summary>
    public const int TotalNumberOfChunksFieldNumber = 8;
    private ulong totalNumberOfChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TotalNumberOfChunks {
      get { return totalNumberOfChunks_; }
      set {
        totalNumberOfChunks_ = value;
      }
    }

    /// <summary>Field number for the "CompleteBlobTotalNumberOfBytes" field.</summary>
    public const int CompleteBlobTotalNumberOfBytesFieldNumber = 9;
    private ulong completeBlobTotalNumberOfBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CompleteBlobTotalNumberOfBytes {
      get { return completeBlobTotalNumberOfBytes_; }
      set {
        completeBlobTotalNumberOfBytes_ = value;
      }
    }

    /// <summary>Field number for the "CompleteBlobSchemaSubject" field.</summary>
    public const int CompleteBlobSchemaSubjectFieldNumber = 10;
    private string completeBlobSchemaSubject_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompleteBlobSchemaSubject {
      get { return completeBlobSchemaSubject_; }
      set {
        completeBlobSchemaSubject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CompleteBlobSchemaVersion" field.</summary>
    public const int CompleteBlobSchemaVersionFieldNumber = 11;
    private string completeBlobSchemaVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompleteBlobSchemaVersion {
      get { return completeBlobSchemaVersion_; }
      set {
        completeBlobSchemaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BlobChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BlobChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChunkId != other.ChunkId) return false;
      if (CompleteBlobId != other.CompleteBlobId) return false;
      if (CompleteBlobChecksum != other.CompleteBlobChecksum) return false;
      if (ChunkNumber != other.ChunkNumber) return false;
      if (ChunkChecksum != other.ChunkChecksum) return false;
      if (ChunkNumberOfByes != other.ChunkNumberOfByes) return false;
      if (ChunkPayload != other.ChunkPayload) return false;
      if (TotalNumberOfChunks != other.TotalNumberOfChunks) return false;
      if (CompleteBlobTotalNumberOfBytes != other.CompleteBlobTotalNumberOfBytes) return false;
      if (CompleteBlobSchemaSubject != other.CompleteBlobSchemaSubject) return false;
      if (CompleteBlobSchemaVersion != other.CompleteBlobSchemaVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ChunkId.Length != 0) hash ^= ChunkId.GetHashCode();
      if (CompleteBlobId.Length != 0) hash ^= CompleteBlobId.GetHashCode();
      if (CompleteBlobChecksum.Length != 0) hash ^= CompleteBlobChecksum.GetHashCode();
      if (ChunkNumber != 0UL) hash ^= ChunkNumber.GetHashCode();
      if (ChunkChecksum.Length != 0) hash ^= ChunkChecksum.GetHashCode();
      if (ChunkNumberOfByes != 0UL) hash ^= ChunkNumberOfByes.GetHashCode();
      if (ChunkPayload.Length != 0) hash ^= ChunkPayload.GetHashCode();
      if (TotalNumberOfChunks != 0UL) hash ^= TotalNumberOfChunks.GetHashCode();
      if (CompleteBlobTotalNumberOfBytes != 0UL) hash ^= CompleteBlobTotalNumberOfBytes.GetHashCode();
      if (CompleteBlobSchemaSubject.Length != 0) hash ^= CompleteBlobSchemaSubject.GetHashCode();
      if (CompleteBlobSchemaVersion.Length != 0) hash ^= CompleteBlobSchemaVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChunkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChunkId);
      }
      if (CompleteBlobId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompleteBlobId);
      }
      if (CompleteBlobChecksum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CompleteBlobChecksum);
      }
      if (ChunkNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChunkNumber);
      }
      if (ChunkChecksum.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChunkChecksum);
      }
      if (ChunkNumberOfByes != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ChunkNumberOfByes);
      }
      if (ChunkPayload.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ChunkPayload);
      }
      if (TotalNumberOfChunks != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TotalNumberOfChunks);
      }
      if (CompleteBlobTotalNumberOfBytes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(CompleteBlobTotalNumberOfBytes);
      }
      if (CompleteBlobSchemaSubject.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CompleteBlobSchemaSubject);
      }
      if (CompleteBlobSchemaVersion.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CompleteBlobSchemaVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChunkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChunkId);
      }
      if (CompleteBlobId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompleteBlobId);
      }
      if (CompleteBlobChecksum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CompleteBlobChecksum);
      }
      if (ChunkNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChunkNumber);
      }
      if (ChunkChecksum.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChunkChecksum);
      }
      if (ChunkNumberOfByes != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ChunkNumberOfByes);
      }
      if (ChunkPayload.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ChunkPayload);
      }
      if (TotalNumberOfChunks != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TotalNumberOfChunks);
      }
      if (CompleteBlobTotalNumberOfBytes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(CompleteBlobTotalNumberOfBytes);
      }
      if (CompleteBlobSchemaSubject.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CompleteBlobSchemaSubject);
      }
      if (CompleteBlobSchemaVersion.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CompleteBlobSchemaVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ChunkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChunkId);
      }
      if (CompleteBlobId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteBlobId);
      }
      if (CompleteBlobChecksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteBlobChecksum);
      }
      if (ChunkNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChunkNumber);
      }
      if (ChunkChecksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChunkChecksum);
      }
      if (ChunkNumberOfByes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChunkNumberOfByes);
      }
      if (ChunkPayload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChunkPayload);
      }
      if (TotalNumberOfChunks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalNumberOfChunks);
      }
      if (CompleteBlobTotalNumberOfBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CompleteBlobTotalNumberOfBytes);
      }
      if (CompleteBlobSchemaSubject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteBlobSchemaSubject);
      }
      if (CompleteBlobSchemaVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompleteBlobSchemaVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BlobChunk other) {
      if (other == null) {
        return;
      }
      if (other.ChunkId.Length != 0) {
        ChunkId = other.ChunkId;
      }
      if (other.CompleteBlobId.Length != 0) {
        CompleteBlobId = other.CompleteBlobId;
      }
      if (other.CompleteBlobChecksum.Length != 0) {
        CompleteBlobChecksum = other.CompleteBlobChecksum;
      }
      if (other.ChunkNumber != 0UL) {
        ChunkNumber = other.ChunkNumber;
      }
      if (other.ChunkChecksum.Length != 0) {
        ChunkChecksum = other.ChunkChecksum;
      }
      if (other.ChunkNumberOfByes != 0UL) {
        ChunkNumberOfByes = other.ChunkNumberOfByes;
      }
      if (other.ChunkPayload.Length != 0) {
        ChunkPayload = other.ChunkPayload;
      }
      if (other.TotalNumberOfChunks != 0UL) {
        TotalNumberOfChunks = other.TotalNumberOfChunks;
      }
      if (other.CompleteBlobTotalNumberOfBytes != 0UL) {
        CompleteBlobTotalNumberOfBytes = other.CompleteBlobTotalNumberOfBytes;
      }
      if (other.CompleteBlobSchemaSubject.Length != 0) {
        CompleteBlobSchemaSubject = other.CompleteBlobSchemaSubject;
      }
      if (other.CompleteBlobSchemaVersion.Length != 0) {
        CompleteBlobSchemaVersion = other.CompleteBlobSchemaVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChunkId = input.ReadString();
            break;
          }
          case 18: {
            CompleteBlobId = input.ReadString();
            break;
          }
          case 26: {
            CompleteBlobChecksum = input.ReadString();
            break;
          }
          case 32: {
            ChunkNumber = input.ReadUInt64();
            break;
          }
          case 42: {
            ChunkChecksum = input.ReadString();
            break;
          }
          case 48: {
            ChunkNumberOfByes = input.ReadUInt64();
            break;
          }
          case 58: {
            ChunkPayload = input.ReadBytes();
            break;
          }
          case 64: {
            TotalNumberOfChunks = input.ReadUInt64();
            break;
          }
          case 72: {
            CompleteBlobTotalNumberOfBytes = input.ReadUInt64();
            break;
          }
          case 82: {
            CompleteBlobSchemaSubject = input.ReadString();
            break;
          }
          case 90: {
            CompleteBlobSchemaVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChunkId = input.ReadString();
            break;
          }
          case 18: {
            CompleteBlobId = input.ReadString();
            break;
          }
          case 26: {
            CompleteBlobChecksum = input.ReadString();
            break;
          }
          case 32: {
            ChunkNumber = input.ReadUInt64();
            break;
          }
          case 42: {
            ChunkChecksum = input.ReadString();
            break;
          }
          case 48: {
            ChunkNumberOfByes = input.ReadUInt64();
            break;
          }
          case 58: {
            ChunkPayload = input.ReadBytes();
            break;
          }
          case 64: {
            TotalNumberOfChunks = input.ReadUInt64();
            break;
          }
          case 72: {
            CompleteBlobTotalNumberOfBytes = input.ReadUInt64();
            break;
          }
          case 82: {
            CompleteBlobSchemaSubject = input.ReadString();
            break;
          }
          case 90: {
            CompleteBlobSchemaVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
